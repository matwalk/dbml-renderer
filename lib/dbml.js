// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
"use strict";
function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    // istanbul ignore next Check is a necessary evil to support older environments
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
            ? this.location.source.offset(s)
            : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = (last - s.column) || 1;
            str += "\n --> " + loc + "\n"
                + filler + " |\n"
                + offset_s.line + " | " + line + "\n"
                + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                + peg$padEnd("", hatLen, "^");
        }
        else {
            str += "\n at " + loc;
        }
    }
    return str;
};
peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },
        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function () {
            return "any character";
        },
        end: function () {
            return "end of input";
        },
        other: function (expectation) {
            return expectation.description;
        }
    };
    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }
        switch (descriptions.length) {
            case 1:
                return descriptions[0];
            case 2:
                return descriptions[0] + " or " + descriptions[1];
            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }
    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { File: peg$parseFile };
    var peg$startRuleFunction = peg$parseFile;
    var peg$c0 = "project";
    var peg$c1 = "{";
    var peg$c2 = "}";
    var peg$c3 = "table";
    var peg$c4 = ".";
    var peg$c5 = "as";
    var peg$c6 = "(";
    var peg$c7 = ")";
    var peg$c8 = "indexes";
    var peg$c9 = ",";
    var peg$c10 = "tablegroup";
    var peg$c11 = "ref";
    var peg$c12 = ":";
    var peg$c13 = "-";
    var peg$c14 = "<>";
    var peg$c15 = ">";
    var peg$c16 = "<";
    var peg$c17 = "enum";
    var peg$c18 = "\"";
    var peg$c19 = "'''";
    var peg$c20 = "'";
    var peg$c21 = "\\'";
    var peg$c22 = "\\\"";
    var peg$c23 = "//";
    var peg$c24 = "/*";
    var peg$c25 = "*/";
    var peg$c26 = "[";
    var peg$c27 = "]";
    var peg$c28 = "`";
    var peg$c29 = "\n";
    var peg$c30 = "\r";
    var peg$r0 = /^[a-zA-Z0-9_]/;
    var peg$r1 = /^[^"\n\r]/;
    var peg$r2 = /^[^'\\]/;
    var peg$r3 = /^[\\]/;
    var peg$r4 = /^[^"\\]/;
    var peg$r5 = /^[^\n\r]/;
    var peg$r6 = /^[^,\]:]/;
    var peg$r7 = /^[^,\]]/;
    var peg$r8 = /^[^`]/;
    var peg$r9 = /^[ \t]/;
    var peg$r10 = /^[ \t\n\r]/;
    var peg$e0 = peg$literalExpectation("Project", true);
    var peg$e1 = peg$literalExpectation("{", false);
    var peg$e2 = peg$literalExpectation("}", false);
    var peg$e3 = peg$literalExpectation("Table", true);
    var peg$e4 = peg$literalExpectation(".", false);
    var peg$e5 = peg$literalExpectation("as", false);
    var peg$e6 = peg$literalExpectation("(", false);
    var peg$e7 = peg$literalExpectation(")", false);
    var peg$e8 = peg$literalExpectation("Indexes", true);
    var peg$e9 = peg$literalExpectation(",", false);
    var peg$e10 = peg$literalExpectation("TableGroup", true);
    var peg$e11 = peg$literalExpectation("Ref", true);
    var peg$e12 = peg$literalExpectation(":", false);
    var peg$e13 = peg$literalExpectation("-", false);
    var peg$e14 = peg$literalExpectation("<>", false);
    var peg$e15 = peg$literalExpectation(">", false);
    var peg$e16 = peg$literalExpectation("<", false);
    var peg$e17 = peg$literalExpectation("Enum", true);
    var peg$e18 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
    var peg$e19 = peg$literalExpectation("\"", false);
    var peg$e20 = peg$classExpectation(["\"", "\n", "\r"], true, false);
    var peg$e21 = peg$literalExpectation("'''", false);
    var peg$e22 = peg$anyExpectation();
    var peg$e23 = peg$literalExpectation("'", false);
    var peg$e24 = peg$classExpectation(["'", "\\"], true, false);
    var peg$e25 = peg$literalExpectation("\\'", false);
    var peg$e26 = peg$classExpectation(["\\"], false, false);
    var peg$e27 = peg$classExpectation(["\"", "\\"], true, false);
    var peg$e28 = peg$literalExpectation("\\\"", false);
    var peg$e29 = peg$literalExpectation("//", false);
    var peg$e30 = peg$literalExpectation("/*", false);
    var peg$e31 = peg$literalExpectation("*/", false);
    var peg$e32 = peg$classExpectation(["\n", "\r"], true, false);
    var peg$e33 = peg$literalExpectation("[", false);
    var peg$e34 = peg$literalExpectation("]", false);
    var peg$e35 = peg$classExpectation([",", "]", ":"], true, false);
    var peg$e36 = peg$classExpectation([",", "]"], true, false);
    var peg$e37 = peg$literalExpectation("`", false);
    var peg$e38 = peg$classExpectation(["`"], true, false);
    var peg$e39 = peg$otherExpectation("space");
    var peg$e40 = peg$classExpectation([" ", "\t"], false, false);
    var peg$e41 = peg$otherExpectation("whitespace");
    var peg$e42 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$e43 = peg$literalExpectation("\n", false);
    var peg$e44 = peg$literalExpectation("\r", false);
    var peg$f0 = function (all) { return all.filter(e => e); };
    var peg$f1 = function () { };
    var peg$f2 = function (name, options) { return { type: "project", name, options }; };
    var peg$f3 = function (name, alias, settings, items) { return { type: "table", ...name, alias, items, settings }; };
    var peg$f4 = function (schema, name) { return { schema, name }; };
    var peg$f5 = function (name) { return { schema: null, name }; };
    var peg$f6 = function (alias) { return alias; };
    var peg$f7 = function (head, item) { return item; };
    var peg$f8 = function (head, tail) { return [head, ...tail]; };
    var peg$f9 = function (option) { return { type: "option", option }; };
    var peg$f10 = function (name, data, settings) { return { type: "column", name, data, settings }; };
    var peg$f11 = function (prefix, suffix) { return prefix + suffix; };
    var peg$f12 = function (schema, prefix, suffix) { return schema + "." + prefix + suffix; };
    var peg$f13 = function (indices) { return { type: "indices", indices }; };
    var peg$f14 = function (head, index) { return index; };
    var peg$f15 = function (head, tail) { return [head, ...tail]; };
    var peg$f16 = function (name) { return [name]; };
    var peg$f17 = function (name) { return [name]; };
    var peg$f18 = function (columns, settings) { return { columns, settings }; };
    var peg$f19 = function (head, entry) { return entry; };
    var peg$f20 = function (head, tail) { return [head, ...tail]; };
    var peg$f21 = function (entries) { return entries; };
    var peg$f22 = function (name, items) { return { type: "group", name, items }; };
    var peg$f23 = function (head, item) { return item; };
    var peg$f24 = function (head, tail) { return [head, ...tail]; };
    var peg$f25 = function (name) { return { type: "table", ...name }; };
    var peg$f26 = function (name, from, cardinality, to, settings) { return { type: "ref", cardinality, from, to, settings }; };
    var peg$f27 = function (n) { return n; };
    var peg$f28 = function (n) { return n; };
    var peg$f29 = function (schemaTable, columns) { return { ...schemaTable, columns }; };
    var peg$f30 = function (name) { return [name]; };
    var peg$f31 = function (head, name) { return name; };
    var peg$f32 = function (head, tail) { return [head, ...tail]; };
    var peg$f33 = function (columns) { return columns; };
    var peg$f34 = function (name, items) { return { type: "enum", name, items }; };
    var peg$f35 = function (head, item) { return item; };
    var peg$f36 = function (head, tail) { return [head, ...tail].filter(i => i); };
    var peg$f37 = function (name, settings) { return { type: "value", name, settings }; };
    var peg$f38 = function (content) { return content; };
    var peg$f39 = function () { return ""; };
    var peg$f40 = function (content) { return content; };
    var peg$f41 = function (head, c) { return c; };
    var peg$f42 = function (head, tail) { return [head, ...tail].join(""); };
    var peg$f43 = function () { return "'"; };
    var peg$f44 = function (content) { return content.join(""); };
    var peg$f45 = function () { return '"'; };
    var peg$f46 = function (content) { return content.join(""); };
    var peg$f47 = function (comment) { return { type: "comment", comment }; };
    var peg$f48 = function (comment) { return comment; };
    var peg$f49 = function () { return ""; };
    var peg$f50 = function (comment) { return comment; };
    var peg$f51 = function (head, c) { return c; };
    var peg$f52 = function (head, tail) { return [head, ...tail].join(""); };
    var peg$f53 = function (pairs) { return pairs; };
    var peg$f54 = function (head, setting) { return setting; };
    var peg$f55 = function (head, tail) { return [head, ...tail].reduce((a, b) => Object.assign(a, b), {}); };
    var peg$f56 = function (key, v) { return v; };
    var peg$f57 = function (key, value) { return { [key]: value }; };
    var peg$f58 = function () { return text().trim(); };
    var peg$f59 = function () { return text().trim(); };
    var peg$f60 = function () { return text(); };
    var peg$f61 = function (head, opt) { return opt; };
    var peg$f62 = function (head, tail) { return [head, ...tail].reduce((a, b) => Object.assign(a, b), {}); };
    var peg$f63 = function (key, value) { return { [key]: value }; };
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$result;
    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
        if (offset && peg$source && (typeof peg$source.offset === "function")) {
            res.start = peg$source.offset(res.start);
            res.end = peg$source.offset(res.end);
        }
        return res;
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parseFile() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseDBML();
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseDBML();
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f0(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseDBML() {
        var s0, s1;
        s0 = peg$parseComment();
        if (s0 === peg$FAILED) {
            s0 = peg$parseProject();
            if (s0 === peg$FAILED) {
                s0 = peg$parseTable();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseTableGroup();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseRef();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseEnum();
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseNewLine();
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f1();
                                }
                                s0 = s1;
                            }
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseProject() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c0) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e0);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseName();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c1;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseOptions();
                s8 = peg$parseComment();
                if (s8 === peg$FAILED) {
                    s8 = null;
                }
                s9 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 125) {
                    s10 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s10 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f2(s3, s7);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseTable() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e3);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseTableName();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseTableAlias();
                if (s5 === peg$FAILED) {
                    s5 = null;
                }
                s6 = peg$parse_();
                s7 = peg$parseSettings();
                if (s7 === peg$FAILED) {
                    s7 = null;
                }
                s8 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s9 = peg$c1;
                    peg$currPos++;
                }
                else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e1);
                    }
                }
                if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    s11 = peg$parseTableItems();
                    s12 = peg$parseComment();
                    if (s12 === peg$FAILED) {
                        s12 = null;
                    }
                    s13 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s14 = peg$c2;
                        peg$currPos++;
                    }
                    else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e2);
                        }
                    }
                    if (s14 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f3(s3, s5, s7, s11);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseTableName() {
        var s0;
        s0 = peg$parseSchemaTableName();
        if (s0 === peg$FAILED) {
            s0 = peg$parseSimpleTableName();
        }
        return s0;
    }
    function peg$parseSchemaTableName() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c4;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseName();
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f4(s1, s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSimpleTableName() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f5(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseTableAlias() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c5) {
            s1 = peg$c5;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e5);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseTableItems() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseTableItem();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s6 = peg$parseTableItem();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f7(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseEOL();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    s6 = peg$parseTableItem();
                    if (s6 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f7(s1, s6);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f8(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseTableItem() {
        var s0, s1;
        s0 = peg$parseComment();
        if (s0 === peg$FAILED) {
            s0 = peg$parseColumn();
            if (s0 === peg$FAILED) {
                s0 = peg$parseIndices();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseOption();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f9(s1);
                    }
                    s0 = s1;
                }
            }
        }
        return s0;
    }
    function peg$parseColumn() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseColumnType();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseSettings();
                if (s5 === peg$FAILED) {
                    s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f10(s1, s3, s5);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSimpleColumnType() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c6;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e6);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parseRawName();
                if (s6 === peg$FAILED) {
                    s6 = null;
                }
                if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c7;
                    peg$currPos++;
                }
                else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                    }
                }
                if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
                s4 = null;
            }
            s3 = input.substring(s3, peg$currPos);
            peg$savedPos = s0;
            s0 = peg$f11(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseQualifiedColumnType() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c4;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseName();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$currPos;
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s9 = peg$c6;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e6);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        s10 = peg$parseRawName();
                        if (s10 === peg$FAILED) {
                            s10 = null;
                        }
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c7;
                            peg$currPos++;
                        }
                        else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e7);
                            }
                        }
                        if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                        }
                        else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                        s8 = null;
                    }
                    s7 = input.substring(s7, peg$currPos);
                    peg$savedPos = s0;
                    s0 = peg$f12(s1, s5, s7);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseColumnType() {
        var s0;
        s0 = peg$parseQualifiedColumnType();
        if (s0 === peg$FAILED) {
            s0 = peg$parseSimpleColumnType();
        }
        return s0;
    }
    function peg$parseIndices() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c8) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c1;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseIndicesList();
                s6 = peg$parseComment();
                if (s6 === peg$FAILED) {
                    s6 = null;
                }
                s7 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f13(s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseIndicesList() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseIndexItem();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s6 = peg$parseIndexItem();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f14(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseEOL();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    s6 = peg$parseIndexItem();
                    if (s6 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f14(s1, s6);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f15(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseIndexItem() {
        var s0;
        s0 = peg$parseComment();
        if (s0 === peg$FAILED) {
            s0 = peg$parseIndex();
        }
        return s0;
    }
    function peg$parseIndex() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseFunction();
        if (s2 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$f16(s2);
        }
        s1 = s2;
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseName();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$f17(s2);
            }
            s1 = s2;
            if (s1 === peg$FAILED) {
                s1 = peg$parseCompositeIndex();
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseSettings();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse_();
            s5 = peg$parseComment();
            if (s5 === peg$FAILED) {
                s5 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f18(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseCompositeIndex() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e6);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            s4 = peg$parseCompositeIndexEntry();
            if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                s7 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c9;
                    peg$currPos++;
                }
                else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    s10 = peg$parseCompositeIndexEntry();
                    if (s10 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f19(s4, s10);
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s8 = peg$c9;
                        peg$currPos++;
                    }
                    else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e9);
                        }
                    }
                    if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        s10 = peg$parseCompositeIndexEntry();
                        if (s10 !== peg$FAILED) {
                            peg$savedPos = s6;
                            s6 = peg$f19(s4, s10);
                        }
                        else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                peg$savedPos = s3;
                s3 = peg$f20(s4, s5);
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c7;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                }
            }
            if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f21(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseCompositeIndexEntry() {
        var s0;
        s0 = peg$parseName();
        if (s0 === peg$FAILED) {
            s0 = peg$parseFunction();
        }
        return s0;
    }
    function peg$parseTableGroup() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c10) {
            s1 = input.substr(peg$currPos, 10);
            peg$currPos += 10;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e10);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s5 = peg$c1;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e1);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseTableGroupItems();
                    s8 = peg$parseComment();
                    if (s8 === peg$FAILED) {
                        s8 = null;
                    }
                    s9 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s10 = peg$c2;
                        peg$currPos++;
                    }
                    else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e2);
                        }
                    }
                    if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f22(s3, s7);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseTableGroupItems() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseTableGroupItem();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s6 = peg$parseTableGroupItem();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f23(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseEOL();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    s6 = peg$parseTableGroupItem();
                    if (s6 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f23(s1, s6);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f24(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseTableGroupItem() {
        var s0, s1;
        s0 = peg$parseComment();
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTableName();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f25(s1);
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseRef() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c11) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e11);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseName();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
                s5 = peg$c12;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseRefFull();
                if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    s9 = peg$parseCardinality();
                    if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        s11 = peg$parseRefFull();
                        if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            s13 = peg$parseSettings();
                            if (s13 === peg$FAILED) {
                                s13 = null;
                            }
                            s14 = peg$parseComment();
                            if (s14 === peg$FAILED) {
                                s14 = null;
                            }
                            peg$savedPos = s0;
                            s0 = peg$f26(s3, s7, s9, s11, s13);
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseRefFull() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseSchemaTableName();
        if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c4;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s4 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f27(s2);
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$parseSimpleTableName();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 46) {
                    s4 = peg$c4;
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e4);
                    }
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f28(s2);
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseRefColumns();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f29(s1, s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseRefColumns() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f30(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$parseCompositeKey();
        }
        return s0;
    }
    function peg$parseCardinality() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 45) {
            s0 = peg$c13;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
                s0 = peg$c14;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e14);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                    s0 = peg$c15;
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e15);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                        s0 = peg$c16;
                        peg$currPos++;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e16);
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseCompositeKey() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e6);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            s4 = peg$parseName();
            if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                s7 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c9;
                    peg$currPos++;
                }
                else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    s10 = peg$parseName();
                    if (s10 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f31(s4, s10);
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s8 = peg$c9;
                        peg$currPos++;
                    }
                    else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e9);
                        }
                    }
                    if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        s10 = peg$parseName();
                        if (s10 !== peg$FAILED) {
                            peg$savedPos = s6;
                            s6 = peg$f31(s4, s10);
                        }
                        else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                }
                peg$savedPos = s3;
                s3 = peg$f32(s4, s5);
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c7;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                }
            }
            if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f33(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseEnum() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c17) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e17);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s5 = peg$c1;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e1);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseEnumValues();
                    s8 = peg$parseComment();
                    if (s8 === peg$FAILED) {
                        s8 = null;
                    }
                    s9 = peg$parse__();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s10 = peg$c2;
                        peg$currPos++;
                    }
                    else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e2);
                        }
                    }
                    if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f34(s3, s7);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseEnumValues() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseEnumValue();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s6 = peg$parseEnumValue();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f35(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseEOL();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    s6 = peg$parseEnumValue();
                    if (s6 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f35(s1, s6);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f36(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseEnumValue() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseSettings();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f37(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseComment();
        }
        return s0;
    }
    function peg$parseName() {
        var s0;
        s0 = peg$parseRawName();
        if (s0 === peg$FAILED) {
            s0 = peg$parseQuotedName();
        }
        return s0;
    }
    function peg$parseRawName() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e18);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e18);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        return s0;
    }
    function peg$parseQuotedName() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c18;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e19);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e20);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e20);
                    }
                }
            }
            s2 = input.substring(s2, peg$currPos);
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c18;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f38(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseString() {
        var s0;
        s0 = peg$parseMultiLineString();
        if (s0 === peg$FAILED) {
            s0 = peg$parseSingleQuotedString();
            if (s0 === peg$FAILED) {
                s0 = peg$parseDoubleQuotedString();
            }
        }
        return s0;
    }
    function peg$parseMultiLineString() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c19) {
            s1 = peg$c19;
            peg$currPos += 3;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e21);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c19) {
                s3 = peg$c19;
                peg$currPos += 3;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e21);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f39();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
                s2 = peg$parseMultiLineStringContent();
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f40(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseMultiLineStringContent() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c19) {
                s5 = peg$c19;
                peg$currPos += 3;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e21);
                }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e22);
                    }
                }
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f41(s1, s5);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 3) === peg$c19) {
                    s5 = peg$c19;
                    peg$currPos += 3;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e21);
                    }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e22);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f41(s1, s5);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (input.substr(peg$currPos, 3) === peg$c19) {
                s3 = peg$c19;
                peg$currPos += 3;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e21);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f42(s1, s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSingleQuotedString() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c20;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = [];
            if (peg$r2.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                }
            }
            if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$r2.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e24);
                        }
                    }
                }
            }
            else {
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
            }
            else {
                s3 = s4;
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c21) {
                    s4 = peg$c21;
                    peg$currPos += 2;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$f43();
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                    if (peg$r3.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e26);
                        }
                    }
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = [];
                if (peg$r2.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e24);
                    }
                }
                if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$r2.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e24);
                            }
                        }
                    }
                }
                else {
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                }
                else {
                    s3 = s4;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c21) {
                        s4 = peg$c21;
                        peg$currPos += 2;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e25);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$f43();
                    }
                    s3 = s4;
                    if (s3 === peg$FAILED) {
                        if (peg$r3.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e26);
                            }
                        }
                    }
                }
            }
            if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c20;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f44(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseDoubleQuotedString() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c18;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e19);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = [];
            if (peg$r4.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
            if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$r4.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e27);
                        }
                    }
                }
            }
            else {
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
            }
            else {
                s3 = s4;
            }
            if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c22) {
                    s4 = peg$c22;
                    peg$currPos += 2;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                    }
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$f45();
                }
                s3 = s4;
                if (s3 === peg$FAILED) {
                    if (peg$r3.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e26);
                        }
                    }
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = [];
                if (peg$r4.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                    }
                }
                if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$r4.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e27);
                            }
                        }
                    }
                }
                else {
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                }
                else {
                    s3 = s4;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c22) {
                        s4 = peg$c22;
                        peg$currPos += 2;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e28);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$f45();
                    }
                    s3 = s4;
                    if (s3 === peg$FAILED) {
                        if (peg$r3.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e26);
                            }
                        }
                    }
                }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c18;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f46(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseComment() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseSingleLineComment();
        if (s1 === peg$FAILED) {
            s1 = peg$parseMultiLineComment();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f47(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseSingleLineComment() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c23) {
            s2 = peg$c23;
            peg$currPos += 2;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e29);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseLineOfText();
            peg$savedPos = s0;
            s0 = peg$f48(s4);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseMultiLineComment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c24) {
            s1 = peg$c24;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e30);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c25) {
                s3 = peg$c25;
                peg$currPos += 2;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f49();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
                s2 = peg$parseMultiLineCommentContent();
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f50(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseMultiLineCommentContent() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c25) {
                s5 = peg$c25;
                peg$currPos += 2;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e22);
                    }
                }
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f51(s1, s5);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2) === peg$c25) {
                    s5 = peg$c25;
                    peg$currPos += 2;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e31);
                    }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e22);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f51(s1, s5);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (input.substr(peg$currPos, 2) === peg$c25) {
                s3 = peg$c25;
                peg$currPos += 2;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f52(s1, s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseLineOfText() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r5.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e32);
            }
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r5.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e32);
                }
            }
        }
        s0 = input.substring(s0, peg$currPos);
        return s0;
    }
    function peg$parseSettings() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c26;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e33);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSettingsPairs();
            if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c27;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f53(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSettingsPairs() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        s1 = peg$parseSetting();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c9;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseSetting();
                if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    peg$savedPos = s3;
                    s3 = peg$f54(s1, s7);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c9;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseSetting();
                    if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        peg$savedPos = s3;
                        s3 = peg$f54(s1, s7);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f55(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseSetting() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseSettingKey();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c12;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                s6 = peg$parseSettingValue();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f56(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f57(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseSettingKey() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e35);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r6.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e35);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f58();
        }
        s0 = s1;
        return s0;
    }
    function peg$parseSettingValue() {
        var s0, s1, s2;
        s0 = peg$parseString();
        if (s0 === peg$FAILED) {
            s0 = peg$parseFunction();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                if (peg$r7.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e36);
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$r7.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e36);
                            }
                        }
                    }
                }
                else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f59();
                }
                s0 = s1;
            }
        }
        return s0;
    }
    function peg$parseFunction() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 96) {
            s1 = peg$c28;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e37);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$r8.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e38);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r8.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e38);
                    }
                }
            }
            if (input.charCodeAt(peg$currPos) === 96) {
                s3 = peg$c28;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e37);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f60();
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseOptions() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseOption();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseEOL();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                s6 = peg$parseOption();
                if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f61(s1, s6);
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseEOL();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    s6 = peg$parseOption();
                    if (s6 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s3 = peg$f61(s1, s6);
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f62(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = null;
        }
        return s0;
    }
    function peg$parseOption() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c12;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseString();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseComment();
                    if (s7 === peg$FAILED) {
                        s7 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f63(s1, s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parse_() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r9.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e40);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r9.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e40);
                }
            }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
            peg$fail(peg$e39);
        }
        return s0;
    }
    function peg$parse__() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r10.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e42);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r10.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e42);
                }
            }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
            peg$fail(peg$e41);
        }
        return s0;
    }
    function peg$parseEOL() {
        var s0, s1, s2;
        s0 = peg$parseNewLine();
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseComment();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNewLine();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseEOF();
            }
        }
        return s0;
    }
    function peg$parseNewLine() {
        var s0, s1, s2;
        if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c29;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e43);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 13) {
                s1 = peg$c30;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e44);
                }
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                    s2 = peg$c29;
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e43);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseEOF() {
        var s0, s1;
        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        peg$silentFails--;
        if (s1 === peg$FAILED) {
            s0 = undefined;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
};
